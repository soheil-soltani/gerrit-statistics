

class GerritProject:
    def __init__(self):
        self.pid = proj_id
        self.branches = None

        
    def get_statistics(self,                                
                       start_time,
                       stop_time,
                       project,
                       branch='master',
                       status,
                       verbose=False,
                       debug=False):
        """Parse the gerrit change statistic and 
        report the frequency of its commits
        thin of doing something like
        class Project()
            self.base_url
            self.branch
            ...
        """
              
        query='since:"{}" before:"{}" branch:"{}" project:"{}"'.format(
            start_time, stop_time, branch, project)

        change_url = self.url+'changes/'
        submissions=[]   # initialize submission records
        for stat in status:
            query = stat+' ' + query
            parameters = {"q" : query,
                          "pp" : 'no-limit',
            }
                                          
            response = requests.get(change_url, auth=HTTPBasicAuth(self.uname, self.pw),
                                    params=parameters)
                            
            #if stat=='status:open':
            #       print(response.url)
              
            clean_content = response.text.split("\n",1)[1]
            #print(cleanContent)
            for entry in json.loads(clean_content):
                #print(entry['created'])
                submissions.append(entry['created'])
                                   
        dates=[]
        for item in submissions:              
            dates.append(item.split()[0])

        unique_dates = set(dates)
        freq = []
        for dd in sorted(unique_dates, reverse=True):
            occurances = Counter(dates)[dd]
            freq.append(occurances)
            if debug:
                print('{} changes issued on {}.'.format(occurances, dd))

        dateFormat='%Y-%m-%d'
        startTstamp=datetime.strptime(start_time, dateFormat)
        stopTstamp=datetime.strptime(stop_time, dateFormat)
        numDays=(stopTstamp-startTstamp).days + 1
        if debug:
            print("Querying statistics over {} days...".format(numDays))
            
        if freq:
            min_freq = min(freq)
            max_freq = max(freq)
            avg_freq = sum(freq)/numDays
            return min_freq, max_freq, avg_freq
        else:
            if verbose:
                print("Empty project: {}".format(project))
            return None, None, None  
